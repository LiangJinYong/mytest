<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.inter.enterprise">

	<!-- Version Check -->
	<select id="getVersionCheckInfo" parameterType="map" resultType="hashmap">
		/* getVersionCheckInfo */
		SELECT MAX(a.current_version_code) as currentVersionCode, MAX(a.current_version_name) as currentVersionName, 
			(SELECT IFNULL(SUM(b.is_forced_update), 0)
	        FROM app_enterprise_version b
	        WHERE b.os_type = #{osType}
	        AND b.current_version_code > #{currentVersionCode}
	       	) as isForceUpdate 
		FROM app_enterprise_version a
		WHERE a.os_type = #{osType}
	</select>
	
	<!-- Signup Superuser -->
	<select id="getCurrentMailCount" parameterType="string" resultType="int">
		/* getCurrentMailCount */
		SELECT COUNT(*) FROM app_enterprise WHERE mail = #{currentMail}
	</select>
	
	<select id="getCurrentIdCount" parameterType="string" resultType="int">
		/* getCurrentIdCount */
		SELECT COUNT(*) FROM app_enterprise_user WHERE id = #{currentId}
	</select>
	
	<insert id="insertAppEnterprise" parameterType="map">
		/* insertAppEnterprise */
		INSERT INTO app_enterprise
        (enterprise_key, name, registration_number, corporate_body_name, mobile_phone_number, address, website, mail, phone_number, type, reg_time)
        VALUES
        (null, #{name}, #{registrationNumber}, #{corporateBodyName}, #{mobilePhoneNumber}, #{address}, #{website}, #{mail}, #{phoneNumber}, #{type}, #{time})
        <selectKey resultType="int" keyProperty="enterpriseKey" order="AFTER">
        	SELECT LAST_INSERT_ID()
        </selectKey>
	</insert>
	
	<insert id="insertAppEnterpriseUser" parameterType="map">
		/* insertAppEnterpriseUser */
		INSERT INTO app_enterprise_user 
		(enterprise_user_key, enterprise_key, id, password, name, auth, reg_time) 
		VALUES 
		(null, #{enterpriseKey}, #{id}, #{password}, #{corporateBodyName}, 'AU00', #{time})
	</insert>
	
	<!-- Create User -->
	<select id="queryAppEnterpriseUserByToken" parameterType="map" resultType="hashmap">
		/* queryAppEnterpriseUserByToken */
		SELECT enterprise_user_key, enterprise_key, auth, password, name FROM app_enterprise_user WHERE token = #{token}
	</select>
	
	<insert id="insertNormalAppEnterpriseUser" parameterType="map">
		/* insertNormalAppEnterpriseUser */
		INSERT INTO app_enterprise_user 
		(enterprise_user_key, enterprise_key, id, password, name, auth, reg_time) 
		VALUES 
		(null, #{enterpriseKey}, #{id}, #{password}, #{name}, 'AU02', #{time})
	</insert>
	
	<!-- Login -->
	<select id="queryAppEnterpriseUserById" parameterType="map" resultType="hashmap">
		/* queryAppEnterpriseUserById */
		SELECT app_enterprise_user.id, app_enterprise_user.name, app_enterprise_user.auth, app_enterprise_user.password, app_enterprise.type 
		FROM app_enterprise_user LEFT JOIN app_enterprise 
		ON app_enterprise_user.enterprise_key = app_enterprise.enterprise_key 
		WHERE app_enterprise_user.id = #{id}
	</select>
	
	<update id="updateToken" parameterType="map">
		/* updateToken */
		UPDATE app_enterprise_user SET token = #{token} WHERE id = #{id}
	</update>
	
	<!-- User List -->
	<select id="queryUserList" parameterType="int" resultType="hashmap">
		/* queryUserList */
		SELECT enterprise_user_key AS enterpriseUserKey, id, name, auth 
		FROM app_enterprise_user 
		WHERE enterprise_key = #{enterpriseKey} AND auth IN ('AU02', 'AU03') ORDER BY auth ASC, name ASC
	</select>
	
	<!-- Modify User Info -->
	<select id="queryAppEnterpriseUserByEnterpriseUserKey" parameterType="int" resultType="hashmap">
		/* queryAppEnterpriseUserByEnterpriseUserKey */
		SELECT * FROM app_enterprise_user WHERE enterprise_user_key = #{enterpriseUserKey} AND (auth = 'AU02' OR auth = 'AU03')
	</select>
	
	<update id="updateUserInfo" parameterType="map">
		/* updateUserInfo */
		UPDATE app_enterprise_user SET password = #{password}, name = #{name} WHERE enterprise_user_key = #{enterpriseUserKey}
	</update>
	
	<!-- Modify My Info -->
	<update id="updateMyInfo" parameterType="map">
		/* updateMyInfo */
		UPDATE app_enterprise_user SET password = #{password}, name = #{name} WHERE token = #{token}
	</update>
	
	<!-- Activate User -->
	<update id="updateUserAuth" parameterType="map">
		/* updateUserAuth */
		UPDATE app_enterprise_user SET auth = 'AU02' WHERE enterprise_user_key = #{enterpriseUserKey}
	</update>
	
	<!-- Deactivate User -->
	<update id="updateUserAuthDeactivate" parameterType="map">
		/* updateUserAuthDeactivate */
		UPDATE app_enterprise_user SET auth = 'AU03' WHERE enterprise_user_key = #{enterpriseUserKey}
	</update>
	
	<!-- Send Mail Certification Code -->
	<select id="queryAppEnterpriseCount" parameterType="map" resultType="int">
		/* queryAppEnterpriseCount */
		SELECT count(*) FROM app_enterprise WHERE mail = #{mail}
	</select>
	
	<insert id="insertMailCertificationCode" parameterType="map">
		/* insertMailCertificationCode */
		INSERT INTO mail_certification_code (mail, certification_code, time) VALUES (#{mail}, #{certificationCode}, #{time})
        ON DUPLICATE KEY
        UPDATE certification_code = #{certificationCode}, time = #{time}, mail = #{mail}
	</insert>
	
	<!-- Confirm Mail Certification Code -->
	<select id="queryCertificationCode" parameterType="map" resultType="hashmap">
		/* queryCertificationCode */
		SELECT mail_certification_code.certification_code FROM mail_certification_code WHERE mail = #{mail}
	</select>
	
	<!-- Enterprise Physical Distribution -->
	<select id="queryOrderBySequence" parameterType="string" resultType="hashmap">
		/* queryOrderBySequence */
		SELECT ORDER_NUMBER orderNumber FROM app_seq WHERE SEQUENCE = #{sequence}
	</select>
	
	<select id="queryBizServiceInfo" parameterType="int" resultType="hashmap">
		/* queryBizServiceInfo */
		SELECT loi.SVC_NM AS svcNm, lbi.BIZ_NAME AS bizNm
		FROM lian_order_info loi LEFT JOIN lian_biz_info lbi
		ON loi.BIZ_ID = lbi.BIZ_ID 
		WHERE loi.ORDER_SEQ = #{orderNumber}
	</select>
	
	<select id="queryAppPhysicalDistributionType" parameterType="string" resultType="hashmap">
		/* queryAppPhysicalDistributionType */
		SELECT app_physical_distribution.type
        FROM app_physical_distribution
        WHERE time = (SELECT MAX(time) FROM app_physical_distribution WHERE SEQUENCE = #{sequence})
        AND SEQUENCE = #{sequence}
	</select>
	
	<insert id="insertAppPhysicalDistribution" parameterType="map">
		/* insertAppPhysicalDistribution */
		INSERT INTO app_physical_distribution 
		(physical_distribution_key, SEQUENCE, latitude, longitude, type, time, enterprise_user_key, province, city, district, full_address, biz_nm, svc_nm) 
		VALUES 
		(null, #{sequence}, #{latitude}, #{longitude}, #{type}, #{time}, #{enterpriseUserKey}, #{province}, #{city}, #{district}, #{fullAddress}, #{bizNm}, #{svcNm})
	</insert>
	
	<!-- Enterprise Physical Distribution List -->
	<select id="queryPhysicalDistributionList" parameterType="map" resultType="hashmap">
		/* queryPhysicalDistributionList */
		SELECT app_physical_distribution.latitude, app_physical_distribution.longitude, app_enterprise.name AS enterpriseName, app_physical_distribution.time, app_enterprise_user.name AS enterpriseUserName, app_physical_distribution.type AS productDistributionType, province, city, district, full_address AS fullAddress
        FROM app_physical_distribution
        LEFT JOIN app_enterprise_user ON app_enterprise_user.enterprise_user_key = app_physical_distribution.enterprise_user_key
        LEFT JOIN app_enterprise ON app_enterprise_user.enterprise_key = app_enterprise.enterprise_key
        WHERE app_physical_distribution.SEQUENCE = #{sequence}
        ORDER BY app_physical_distribution.time DESC
	</select>
	
	<!-- Enterprise Physical Distribution EnterpriseList  -->
	<select id="queryPhysicalDistributionHistoryList" parameterType="map" resultType="hashmap">
		/* queryPhysicalDistributionHistoryList */
		SELECT sequence, svc_nm AS svcNm, time, biz_nm AS bizNm, type
		FROM app_physical_distribution
		<if test="enterpriseUserKey == '-1'">
		WHERE enterprise_user_key = #{currentEnterpriseUserKey}
		</if>
		<if test="enterpriseUserKey != '-1'">
		WHERE enterprise_user_key = #{enterpriseUserKey}
		</if>
		<if test="time != ''">
		AND time &lt; #{time}
		</if>
		ORDER BY time DESC
		LIMIT 20
	</select>
	
</mapper>